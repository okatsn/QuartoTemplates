/*-- scss:defaults --*/

// $body-bg: #d6ffa448;
// $body-color: #fff;
$link-color: #186949;
$code-color: #4758ab; // The same color for theme "serif"
// $code-bg: #a3a3a3;

// CHECKPOINT: Customize font: https://quarto.org/docs/presentations/revealjs/themes.html#creating-themes
$font-family-sans-serif: "Noto Serif CJK TC Medium", "Noto Serif TC Medium",
    FreeSerif, serif !default;

$presentation-heading-font: "Noto Serif CJK TC Black", "Noto Serif TC Black",
    FreeSerif, serif !default; // second choice of font.
$presentation-heading-color: #383d3d !default;
// !default means these settings can be overridden.

/*-- scss:rules --*/

// set code larger


// Plain-text code (no language specified)
code {
    font-size: 1em;
}

// It is of class="aside-footnotes"
.aside-footnotes {
    font-size: 0.7em;
}

// Source code (language specified, e.g., ```julia)
code.sourceCode {
    font-size: 1.3em;

}


// Math
// See https://github.com/quarto-dev/quarto-cli/discussions/2392#discussioncomment-3614052

// Inline math 
.math.inline {
    font-size: 100% !important;
}

// Displayed mode (those bracketed by$$) math
.math.display {
    font-size: 80% !important;
    // color: #b22222;
}

// Quote

blockquote {
    font-size: 0.8em;
}

//// TOC attributes (Not work)
//
// .reveal .TOC {
//     /* Set the maximum height based on your slide height */
//     max-height: 85vh;
//     /* 85% of the viewport height */
//     overflow-y: auto;
//     /* Enable vertical scrolling */
//     padding-right: 20px;
//     /* Add padding to avoid text cutting off on the right */
// }
// 
/* Custom CSS for scrollable TOC */
// section#TOC {
//     max-height: 100vh;
//     /* Make sure the TOC does not exceed the viewport height */
//     overflow-y: auto;
//     /* Add vertical scrollbar if the content overflows */
//     padding: 20px;
//     /* Optional: Add padding for better appearance */
// }


//// TOC attributes (worked)
//
section#TOC nav[role="doc-toc"] {
    max-height: 800px;
    /* Limit the height of the TOC itself */
    overflow-y: auto;
    /* Enable vertical scrolling for the TOC */
}

// (optional)
// section#TOC h2#toc-title {
//     position: sticky;
//     top: 0;
//     background-color: white;
//     z-index: 10;
//     /* Keep the title fixed when scrolling */
//     padding: 10px 0;
// }




// The first slide attributes

h1.title {
    font-size: 1.8em
}

p.subtitle {
    font-size: 1.5em
}

// The final slide attributes

.thankyou p {
    font-size: 4rem;
    overflow-y: auto;
    text-align: right;
    color: #333;
    font-weight: 600;
    /* Semi-bold font weight */
}

//// Fragments

// Overwrite highlight color
// Because I didn't find a way to make custom fragment to appear at very beginning, I choose to override the default color (using `!important` syntax)

.highlight-red.visible {
    color: indianred !important
}

.highlight-green.visible {
    color: forestgreen !important
}

.highlight-blue.visible {
    color: steelblue !important
}

.highlight-current-red.current-fragment {
    color: indianred !important
}

.highlight-current-green.current-fragment {
    color: forestgreen !important
}

.fragment.highlight-current-blue.current-fragment {
    color: steelblue !important
}

// Customized highlighter

// Color of After
.fragment.highlight-current-indianred.visible {
    color: inherit;
}

// Color of After
.fragment.highlight-indianred.visible {
    color: indianred;
}

// Forced default visibility
.fragment.highlight-current-indianred,
.fragment.highlight-indianred {
    opacity: 1 !important;
    visibility: visible !important;
    color: inherit;
}

// The moment triggered (Current)
.fragment.highlight-current-indianred.current-fragment,
.fragment.highlight-indianred.current-fragment {
    color: indianred;
    font-weight: bold;
}


// steel blue
.fragment.highlight-current-steelblue.visible {
    color: inherit;
}

.fragment.highlight-steelblue.visible {
    color: steelblue;
}

.fragment.highlight-current-steelblue,
.fragment.highlight-steelblue {
    opacity: 1 !important;
    visibility: visible !important;
    color: inherit;
}

.fragment.highlight-current-steelblue.current-fragment,
.fragment.highlight-steelblue.current-fragment {
    color: steelblue;
    font-weight: bold;
}



// forest green
.fragment.highlight-current-forestgreen.visible {
    color: inherit;
}

.fragment.highlight-forestgreen.visible {
    color: forestgreen;
}

.fragment.highlight-current-forestgreen,
.fragment.highlight-forestgreen {
    opacity: 1 !important;
    visibility: visible !important;
    color: inherit;
}

.fragment.highlight-current-forestgreen.current-fragment,
.fragment.highlight-forestgreen.current-fragment {
    color: forestgreen;
    font-weight: bold;
}

// bold
.fragment.highlight-current-bold.visible {
    color: inherit;
}

.fragment.highlight-bold.visible {
    color: inherit;
    font-weight: bold;
    text-shadow: 2px 0 #888888;
}

.fragment.highlight-current-bold,
.fragment.highlight-bold {
    opacity: 1 !important;
    visibility: visible !important;
}

.fragment.highlight-current-bold.current-fragment,
.fragment.highlight-bold.current-fragment {
    font-weight: bold;
    text-shadow: 2px 0 #888888;
}




// Blur
// This is an experimental feature. While I expect the content is displayed with blur at first and then blur removed, the actual behavior is that the content is hidden at first, then appear blurred, and then blur removed.
// Please refer https://revealjs.com/fragments/#custom-fragments-4.5.0
// Example of use: <span class="fragment blur" data-fragment-index=0>Earth Sciences</span>
// Advanced fragment techniques: https://stackoverflow.com/questions/33328330/how-can-i-make-the-first-fragment-highlighted-automatically-visible-in-reveal
// Source code: https://github.com/hakimel/reveal.js/blob/master/css/reveal.scss

// After current fragment
.fragment.blur.visible {
    filter: none;
}

// I expect <span class="fragment blur"> content </span> to be visible in the beginning but it doesn't until `!important` declaration.
.fragment.blur {
    opacity: 1 !important;
    visibility: visible !important;
    filter: blur(5px);
}


.fragment.blur.current-fragment {
    filter: none;
}


// Tags
// {.xtag} is equivalent to something like {style="float:right;text-align:right;color:red"}
// Example: Hello where [this part looks like a tag that appears as a animated fragment]{.nftag fragment-index=1 .fragment}
// Colors: https://www.w3schools.com/tags/ref_colornames.asp
// Ohter good colors
// - DarkGoldenRod #B8860B
// - DarkOliveGreen #556B2F
// - DarkCyan #008B8B // Tag that floats to the right
// - FireBrick #B22222
//
// KEYNOTE: 
// - Tag will attach to the succeeding element, even when there are line breaks.
//   If you want the tag appear alone in one line, use an empty character
//   Unicode Character “⠀” (U+2800)

// Tag that floats to the right


.rtag {
    font-size: 0.7em;
    float: right;
    color: #fef9e7;
    background-color: #008B8B;
    border: 0.2em solid #008B8B;
    border-radius: 10px;
}

// Tag that floats to the left

.ltag {
    font-size: 0.7em;
    float: left;
    color: #fef9e7;
    background-color: #008B8B;
    border: 0.2em solid #008B8B;
    border-radius: 10px;
}

.bltag {
    font-size: 0.7em;
    float: left;
    color: #fef9e7;
    background-color: black;
    border: 0.2em solid black;
    border-radius: 10px;
}

.brtag {
    font-size: 0.7em;
    float: right;
    color: #fef9e7;
    background-color: black;
    border: 0.2em solid black;
    border-radius: 10px;
}


// No-floating tag

.nftag {
    font-size: 0.7em;
    color: #fef9e7;
    background-color: #008B8B;
    border: 0.2em solid #008B8B;
    border-radius: 10px;
    /* 10px rounded corners */
}


// The final slide attributes

.thankyou-gold p {
    font-size: 100px;
    overflow-y: auto;
    text-align: right;
    font-weight: 600;
    font-size: 0.7em;
    color: #fef9e7;
    background-color: #B8860B;
    border: 0.2em solid #B8860B;
    border-radius: 10px;
    /* Semi-bold font weight */
}


// Inline image
// Refer: https://stackoverflow.com/a/74100740
.inlineimg {
    margin: 0 !important;
    height: 1em;
}



.fragment.highlight-back {
    position: relative;
    z-index: 2; // Make sure the text stays on top
    /* Make text always visible, overriding reveal.js fragment behavior */
    opacity: 1 !important;
    visibility: visible !important;
    /* Default highlight color if not specified */
    --bg-color: rgba(255, 255, 0, 0.5);
}


.fragment.highlight-back::after {
    content: '';
    position: absolute;
    top: 0;
    left: 5%; // shift the block toward right 5%,
    transform: translate(-8%, -0px); // and then shift the block -8% percent (toward left), in order to make space for the padding to the left
    /* Center horizontally and position slightly higher */
    // -50%: shift the block 50 percent the length of the block from the end of the highlighted word, in order to make it centered to the target word.
    background-color: var(--bg-color);
    /* Yellow with 50% opacity */
    border: 0px solid var(--bg-color);
    padding-top: 0px;
    padding-right: 6px;
    padding-bottom: 0px;
    padding-left: 2px;
    border-radius: 10px;
    /* Curved corners */
    z-index: -1;
    /* Place behind the highlighted text */
    width: 105%;
    /* Make background wider than text */
    height: 110%;
    /* Make background taller than text */
    /* Initially invisible */
    opacity: 0;
    transition: opacity 0.3s ease;
}

/* Show the highlight background only when fragment is active */
.fragment.highlight-back.visible::after {
    opacity: 1;
}


.fragment.highlight-current-back {
    position: relative;
    z-index: 2;
    opacity: 1 !important;
    visibility: visible !important;
    /* Default highlight color if not specified */
    --bg-color: rgba(255, 255, 0, 0.5);
}

/* Initially hide the highlight background */
.fragment.highlight-current-back::after {
    content: '';
    position: absolute;
    top: 0;
    left: 5%;
    transform: translate(-8%, -0px);
    /* Use the custom variable for background color */
    background-color: var(--bg-color);
    border: 0px solid rgba(255, 255, 0, 0.9);
    padding-top: 0px;
    padding-right: 6px;
    padding-bottom: 0px;
    padding-left: 2px;
    border-radius: 10px;
    z-index: -1;
    width: 105%;
    height: 110%;
    /* Initially invisible */
    opacity: 0;
    transition: opacity 0.3s ease;
}

/* Show the highlight background ONLY when fragment is both visible AND current */
.fragment.highlight-current-back.visible.current-fragment::after {
    opacity: 1;
}

/* Hide the highlight when moving away from this fragment */
.fragment.highlight-current-back.visible:not(.current-fragment)::after {
    opacity: 0;
}

.custom-box {
    position: absolute;
    --left: 20px;
    --top: 20px;
    /* Distance from bottom */
    // left: 50%;
    // /* Center horizontally */
    // transform: translateX(-50%);
    // /* Ensure proper centering */

    /* Default values that can be overridden */
    --bg-color: #3fb618;
    --width: 150px;
    --height: 150px;
    --radius: 20px;

    /* Use the variables */
    background-color: var(--bg-color);
    width: var(--width);
    height: var(--height);
    border-radius: var(--radius);
    left: var(--left);
    top: var(--top);

    /* Ensure the box stays BEHIND other content */
    z-index: -10;
}